{"ast":null,"code":"'use strict';\n\nvar expirationYear = require('./expiration-year');\n\nvar isArray = require('./lib/is-array');\n\nfunction getNumberOfMonthDigitsInDateString(dateString) {\n  var firstCharacter = Number(dateString[0]);\n  var assumedYear;\n  /*\n    if the first character in the string starts with `0`,\n    we know that the month will be 2 digits.\n     '0122' => {month: '01', year: '22'}\n  */\n\n  if (firstCharacter === 0) {\n    return 2;\n  }\n  /*\n    if the first character in the string starts with\n    number greater than 1, it must be a 1 digit month\n     '322' => {month: '3', year: '22'}\n  */\n\n\n  if (firstCharacter > 1) {\n    return 1;\n  }\n  /*\n    if the first 2 characters make up a number between\n    13-19, we know that the month portion must be 1\n     '139' => {month: '1', year: '39'}\n  */\n\n\n  if (firstCharacter === 1 && Number(dateString[1]) > 2) {\n    return 1;\n  }\n  /*\n    if the first 2 characters make up a number between\n    10-12, we check if the year portion would be considered\n    valid if we assumed that the month was 1. If it is\n    not potentially valid, we assume the month must have\n    2 digits.\n     '109' => {month: '10', year: '9'}\n    '120' => {month: '1', year: '20'} // when checked in the year 2019\n    '120' => {month: '12', year: '0'} // when checked in the year 2021\n  */\n\n\n  if (firstCharacter === 1) {\n    assumedYear = dateString.substr(1);\n    return expirationYear(assumedYear).isPotentiallyValid ? 1 : 2;\n  }\n  /*\n    If the length of the value is exactly 5 characters,\n    we assume a full year was passed in, meaning the remaining\n    single leading digit must be the month value.\n     '12202' => {month: '1', year: '2202'}\n  */\n\n\n  if (dateString.length === 5) {\n    return 1;\n  }\n  /*\n    If the length of the value is more than five characters,\n    we assume a full year was passed in addition to the month\n    and therefore the month portion must be 2 digits.\n     '112020' => {month: '11', year: '2020'}\n  */\n\n\n  if (dateString.length > 5) {\n    return 2;\n  }\n  /*\n    By default, the month value is the first value\n  */\n\n\n  return 1;\n}\n\nfunction parseDate(date) {\n  var month, numberOfDigitsInMonth;\n\n  if (/^\\d{4}-\\d{1,2}$/.test(date)) {\n    date = date.split('-').reverse();\n  } else if (/\\//.test(date)) {\n    date = date.split(/\\s*\\/\\s*/g);\n  } else if (/\\s/.test(date)) {\n    date = date.split(/ +/g);\n  }\n\n  if (isArray(date)) {\n    return {\n      month: date[0] || '',\n      year: date.slice(1).join()\n    };\n  }\n\n  numberOfDigitsInMonth = getNumberOfMonthDigitsInDateString(date);\n  month = date.substr(0, numberOfDigitsInMonth);\n  return {\n    month: month,\n    year: date.substr(month.length)\n  };\n}\n\nmodule.exports = parseDate;","map":null,"metadata":{},"sourceType":"script"}